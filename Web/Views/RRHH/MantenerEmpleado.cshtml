     
@model Web.Models.Empleado
@using Web.Models
@{
    ViewBag.Title = "Mantener Empleado";   
}


<h1>Mantener Empleado</h1>

<fieldset>
 <legend>Datos del Formulario</legend>
 
    <form id = "form" action="Guardar" method= post>
     <ul>
     <li>
        @Html.LabelFor(p => p.persona.id)
        @Html.TextBoxFor(p => p.persona.id, new { @readonly = "readonly" })
     </li><li>
                 <div class="editor-label">@Html.LabelFor(p => p.persona.nombre)</div>
                     @Html.TextBoxFor(p => p.persona.nombre)    
        </li><li>  
                 <div class="editor-label">@Html.LabelFor(p => p.persona.apPaterno)</div>  
                     @Html.TextBoxFor(p => p.persona.apPaterno)           
        </li><li>           
                    <div class="editor-label">@Html.LabelFor(p => p.persona.apMaterno)</div>
                    @Html.TextBoxFor(p => p.persona.apMaterno)          
        </li><li>            
                    <div class="editor-label">@Html.LabelFor(p => p.persona.direccion)</div>
                    @Html.TextBoxFor(p => p.persona.direccion)              
        </li><li>
                    <div class="editor-label">@Html.LabelFor(p => p.sueldo)</div>
                    @Html.TextBoxFor(p => p.sueldo)
         </li><li>
                    <div class="editor-label">@Html.LabelFor(p => p.persona.dni)</div>
                    @Html.TextBoxFor(p => p.persona.dni)
         </li><li>
            @*------------ESTODOCIVIL--------------*@
     <div class = "editor-label">    @Html.LabelFor(p => p.persona.estadoCivil)    </div>  
          @(Html.Kendo().DropDownList()
           .Name("estadoComboBox")
          .DataTextField("nombre")
          .DataValueField("nombre")
          .AutoBind(true)
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Leer_Estados", "RRHH");
              })
              .ServerFiltering(true);
          })
          .Value(Model != null && Model.persona != null ? Model.persona.estadoCivil : Web.Models.Persona.listestadocivil.FirstOrDefault().nombre)
    )  
        </li><li> 
            @*-----------------SEDES----------------*@
            <div class = "editor-label">   @Html.LabelFor(p => p.sede.nombre) </div> 
                 
          @(Html.Kendo().DropDownList()
           .Name("sedeComboBox")       
          .DataTextField("nombre")
          .DataValueField("id")
         .AutoBind(true)
        .BindTo(Sede.SeleccionarTodo()) 
        .Value(Model != null && Model.sede != null ? Model.sede.id.ToString() : null)
          )
            </li><li>            
         <div class = "editor-label">   @Html.LabelFor(p => p.tipoEmpleado.nombre) </div>        
           
          @(Html.Kendo().DropDownList()
           .Name("tipoempleadoComboBox")
          .DataTextField("nombre")
          .DataValueField("id")
          .AutoBind(true)
          .BindTo(TipoEmpleado.seleccionarTodo())  
          .Value(Model != null && Model.tipoEmpleado != null ? Model.tipoEmpleado.id.ToString() :null)
    )</li><li>
    <div class = "editor-label">   @Html.LabelFor(p => p.turnodetrabajo.nombre) </div>        
           
          @(Html.Kendo().DropDownList()
           .Name("turnotrabajoComboBox")
          .DataTextField("nombre")
          .DataValueField("id")
          .AutoBind(true)
          .BindTo(TurnoDeTrabajo.seleccionarTodo()) 
          .Value(Model != null && Model.turnodetrabajo != null ? Model.turnodetrabajo.id.ToString() : null)
    ) </li>
    </ul>     
            @Html.TextBoxFor(p => p.persona.estadoCivil  , new { style = "display: none;" })     
            @Html.TextBoxFor(p => p.tipoEmpleado.id , new { style = "display: none;" })      
            @Html.TextBoxFor(p => p.sede.id, new { style = "display: none;" })
            @Html.TextBoxFor(p => p.turnodetrabajo.id , new { style = "display: none;" })

    <div id="botones">
  <input type="button" value= "Limpiar"  id="limpiar" onclick="location.href = '@(Url.Action("MantenerEmpleado", "RRHH"))'" class="button fright"/>
  <input type="submit" value=  @(Model == null ? "Insertar" : "Modificar")  />
  <!--input type="button" value= "Cancelar" id="cancelar" onclick="location.href = '@(Url.Action("Index", "Home"))'" class="button fright"/--> 
    </div>
    @if (ViewData["message"] == null)
    { }
    else if (ViewData["message"].Equals("F"))
    { <script type= "text/javascript">alert("Lo sentimos!\n No se pudo realizar la operacion\nVuelva a intentarlo en otro momento. ")</script>}
    else if (ViewData["message"].Equals("E"))
    { <script type= "text/javascript">alert("La operación se realizó con éxito!")</script>}                                                                                                                                      
  </form>
  
  </fieldset>
   
   <div id="kendotable">
    @(Html.Kendo().Grid<Web.Models.Empleado>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.persona.nombre).Sortable(true);     //100
        //  .Filterable(filterable => filterable.UI("nombreFiltro"));
        columns.Bound(p => p.persona.apPaterno).Sortable(true);  //140
        columns.Bound(p => p.persona.apMaterno).Sortable(true);  //140
        columns.Bound(p => p.sede.nombre).Sortable(true);             //180
       // columns.Bound(p => p.persona.estadoCivil).Sortable(true);
        // .Filterable(filterable => filterable.UI("sueldoFiltro"));
        columns.Command(command => { command.Custom("Editar").Click("Edit"); command.Destroy().Text("Eliminar"); }).Width(181);

    })
    .Editable(editable => { editable.Mode(GridEditMode.InLine); editable.DisplayDeleteConfirmation("El registro será eliminado ¿Desea continuar?"); })
    .Selectable()
            //.Groupable()
               .Pageable()
               .Sortable()
               .Filterable(filterable => filterable
                                              .Extra(false)
                                              .Operators(operators => operators
                                                                      .ForString(str => str.Clear()
                                                                          .Contains("Contiene")
                                                                                           .StartsWith("Empezar con")
                                                                                           .IsEqualTo("Es igual a")
                                                                                           .IsNotEqualTo("Diferente a"))
                                                                      .ForNumber(number => number.Clear()
                                                                                                 .IsGreaterThan("Es mayor a")
                                                                                                 .IsLessThan("Es menor a")
                                                                                                 .IsEqualTo("Es igual a")
                                                                                                 .IsNotEqualTo("Es diferente a"))
                                                                      )
                                )
    .DataSource(datasource => datasource
                                .Ajax()
                                        .PageSize(6)
                                    .Read(read => read.Action("Leer", "RRHH"))
                                                        .Batch(false)
                                                                .ServerOperation(false)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(p => p.persona.id))
                                                              .Destroy(update => update.Action("Eliminar", "RRHH"))



                )
)
</div>



<script type="text/javascript">

$("#form").validate({
    ignore: "",
		rules: {
            "persona.estadoCivil":  {
                required : true      
                },
            "tipoEmpleado.id":  {
                required : true
                },
            "sede.id":  {
                required : true
                },
			"persona.nombre" : {    
                required : true,
                maxlength : 50
                },
            "persona.apPaterno" :{
                required : true,
                maxlength : 50
                },
            "persona.apMaterno" : {
                required : true,
                maxlength : 50
                },
            "persona.dni" : {required: true, digits: true, minlength: 8, maxlength: 8},
            "persona.direccion" : {
                required : true,
                maxlength : 150
                },
            "turnodetrabajo.id" : {
                required : true
                },
            sueldo:{
				required: true,
                number: true,
                range: [750,100000]
			}
		},
		messages: {
      "persona.estadoCivil":  {
                required :""
               
                },
                 "turnodetrabajo.id" : {
                required : ""
                },
            "tipoEmpleado.id":  {
                required : ""
                },
            "sede.id":  {
                required :""
                },
       		"persona.nombre" : {
                required: "*Campo obligatorio",
                maxlength : "Tamaño máx. 50 caracteres"
                },
             "persona.apPaterno" : {
                required: "*Campo obligatorio",
                maxlength : "Tamaño máx. 50 caracteres"
                },
            "persona.apMaterno" : {
                required: "*Campo obligatorio",
                maxlength : "Tamaño máx. 50 caracteres"
                },
            "persona.direccion" : {
                required: "*Campo obligatorio",
                maxlength : "Tamaño máx. 150 caracteres"
                },
            "persona.dni" : {required: "*Campo obligatorio", digits: "Ingrese solo dígitos", minlength: "Ingrese 8 dígitos", maxlength: "Ingrese 8 dígitos"},
            sueldo:{
				required: "*Campo obligatorio",
                number:  "Ingrese un número válido",
                range: "El sueldo esta fuera del rango"
			}
		},
//		submitHandler: function(form) {
//            form.submit();		
//		}
		submitHandler: function ConfirmationBox(form){
            var result = confirm ("¿Está seguro de realizar los cambios?");
            if (result == true){
                form.submit();
                return true;
            }
            else {
                return false;
            }
        }
});




$(document).ready(function() {
var dropdownlist = $("#sedeComboBox").data("kendoDropDownList");
        
            $("#sede_id").val(dropdownlist.value());
        dropdownlist.bind("change",function(e){ 
            $("#sede_id").val(dropdownlist.value());            
           //alert("idSede: "+dropdownlist.value()); 
        });
     
    });
$(document).ready(function() {
var dropdownlist = $("#turnotrabajoComboBox").data("kendoDropDownList");
        $("#turnodetrabajo_id").val(dropdownlist.value());
        dropdownlist.bind("change",function(e){
            $("#turnodetrabajo_id").val(dropdownlist.value());
            //alert("idSede: "+combobox.value()); 
        });
        
    });
$(document).ready(function() {
        var dropdownlist = $("#estadoComboBox").data("kendoDropDownList");
          $("#persona_estadoCivil").val(dropdownlist.value());
        dropdownlist.bind("change",function(e){
            $("#persona_estadoCivil").val(dropdownlist.value());
            // alert("idSede: "+combobox.value()); 
        });
    });
$(document).ready(function() {
        var dropdownlist = $("#tipoempleadoComboBox").data("kendoDropDownList");
        $("#tipoEmpleado_id").val(dropdownlist.value());
        dropdownlist.bind("change",function(e){
            $("#tipoEmpleado_id").val(dropdownlist.value());
          //   alert("idSede: "+combobox.value()); 
        });
    });
function error_handler(e) {
//            if (e.errors) {
//                var message = "Errors:\n";
//                $.each(e.errors, function (key, value) {
//                    if ('errors' in value) {
//                        $.each(value.errors, function () {
//                            message += this + "\n";
//                        });
//                    }
//                });
//                alert(message);
//            }
    alert("A ocurrido un error en el servidor!\n Vuelva a intentar la operación en unos minutos...");
      }
    function nombreFiltro(element) {
        element.kendoAutoComplete({
            dataSource: {
                transport: {
                    read: "@Url.Action("/FilterMenuCustomization_Nombre", "RRHH")"
                }
            }
        });
    }

    function sueldoFiltro(element) {
        element.kendoAutoComplete({
            dataSource: {
                transport: {
                    read: "@Url.Action("/FilterMenuCustomization_Sueldo", "RRHH")"
                }
            }
        });
     } 

     function Edit(e){
        e.preventDefault();
        var grid = $('#Grid').data('kendoGrid');
        var row = grid.select();
        var dataItem = grid.dataItem(row);
        var id = dataItem.id;
        var sede = dataItem.sede.id;
        location = "@Url.Action("Editar")"+"?persona.id=" + id ;
    }
  </script>
  <script type="text/javascript">   
      function onAdditionalData() {
        return {
            text: $("#sedeComboBox").val()
        };
    }
     
</script>

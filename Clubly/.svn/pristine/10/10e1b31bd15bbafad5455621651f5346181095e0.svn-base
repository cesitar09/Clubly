using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Newtonsoft.Json;
using Kendo.Mvc.UI;
namespace Web.Controllers
{
    public class ReservasController : Controller
    {
        //********************************RESERVAR CANCHA*******************************************************************************************

        [AcceptVerbs(HttpVerbs.Get | HttpVerbs.Post)]
        public ActionResult ReservarCancha(Models.ReservaCancha reserva)
        {
            ViewData["message"] = null;
            return View((IView)null);
        }

        public bool BuscarDisponibilidad(Models.ReservaCancha reserva) {
            //----Excepcion
            IEnumerable<Models.ReservaCancha> ListaReserva = Models.ReservaCancha.SeleccionarTodo();
            bool disponibilidad=true;

            if (ListaReserva != null) //Para que la Lista no este Vacio
            {
                foreach (var resev in ListaReserva)
                {
                    if (resev.cancha != null && reserva.cancha!=null)
                    {
                        if (resev.cancha.id == reserva.cancha.id)
                        {
                            if (resev.horaInicio.Date == reserva.horaInicio.Date)
                            {
                                if ((resev.horaInicio >= reserva.horaInicio && resev.horaFin <= reserva.horaFin) || (resev.horaFin <= reserva.horaInicio && resev.horaFin >= reserva.horaFin)
                                    || (resev.horaInicio >= reserva.horaInicio && resev.horaFin >= reserva.horaFin && resev.horaInicio<=reserva.horaFin) || (resev.horaInicio <= reserva.horaInicio && resev.horaFin >= reserva.horaInicio && resev.horaFin <= reserva.horaFin)
                                    || (resev.horaInicio==reserva.horaInicio && resev.horaFin==reserva.horaFin))
                                {
                                    disponibilidad = false;
                                }

                            }

                        }   //*Primero Valida Si la hora que eligo engloba otro hora
                    }       //*Segundo  Valida si la hora que eligo esta entre otra hora
                }           //*Tercero valida si la hora de incio esta antes de de la hora y la hora fin esta entre las horas de otra fecha
                            //*Cuarto valida si la hora de inicio esta entre la hora de incio de otra y la hora fin y la hora fin es mayor
            }               //*Quinto que no sea igual a las horas    
           return disponibilidad;
        }

        public bool ValidarHoras(Models.ReservaCancha reserva) {

            if (reserva.horaFin.Hour > reserva.horaInicio.Hour)
            {
                if (reserva.horaFin.Hour - reserva.horaInicio.Hour <= 2) return true; 
            }
            else
                if (reserva.horaFin.Hour == reserva.horaInicio.Hour)
                    if (reserva.horaFin.Minute >= reserva.horaInicio.Minute)
                        if (reserva.horaFin.Hour - reserva.horaInicio.Hour <= 2) return true;         
            
            return false;
        }


        public ActionResult IngresarReservaCancha(Models.ReservaCancha reserva)
        {
            int val;
            bool disponibilidad=false;


            if (ValidarHoras(reserva))
            {
                //Asigno horas para el model0
                DateTime fechaInicial = new DateTime();
                DateTime fechaFinal = new DateTime();

                fechaInicial = reserva.fechaInicio.Add(reserva.horaInicio.TimeOfDay);
                fechaFinal = reserva.fechaInicio.Add(reserva.horaFin.TimeOfDay);
                reserva.horaInicio = fechaInicial;
                reserva.horaFin = fechaFinal;

                reserva.actividad = null;

                //Si selecciona Cancha
                if (reserva.idCancha != 0)
                {   //-----excepcion
                    reserva.cancha = Models.Cancha.buscarId(reserva.idCancha);
                    if (BuscarDisponibilidad(reserva))
                    {   //-----Excepcion
                        reserva.familia = Models.Familia.buscarId(10001);
                        //-----Excepcion
                        val = Models.ReservaCancha.Insertar(reserva);
                        if (val == 0) ViewData["message"] = "F";
                        if (val == 1) ViewData["message"] = "R";
                        return View("ReservarCancha", reserva);

                    }
                    else
                    {
                        ViewData["message"] = "ND";
                        return View("ReservarCancha", reserva);
                    }
                }
                else //Sino selecciona Cancha
                {   //------Excepcion
                    IEnumerable<Models.Cancha> ListaCancha = Models.Cancha.BuscarSedeTipo(reserva.idSede,reserva.idTipoCancha);

                    foreach (var cancha in ListaCancha)
                    {
                        reserva.cancha = cancha;
                        if (BuscarDisponibilidad(reserva))
                        {
                            disponibilidad = true;
                            break;
                        }
                    }

                    if (disponibilidad)
                    {
                        if (reserva.id == 0)
                            //----Excepcion
                            reserva.familia = Models.Familia.buscarId(10001);

                        //---Excepcion
                        reserva.idCancha = reserva.cancha.id;
                        val = Models.ReservaCancha.Insertar(reserva);
                        if (val == 0) ViewData["message"] = "F";
                        if (val == 1) ViewData["message"] = "R";
                        return View("ReservarCancha", reserva);

                    }
                    else
                    {
                        ViewData["message"] = "NDT";
                        return View("ReservarCancha", reserva);
                    }

                }

            }
            else
            {
                ViewData["message"] = "HNV";
            }
            
            
            return View("ReservarCancha", reserva);
        }

        public ActionResult LeerReservasCanchas([DataSourceRequest] DataSourceRequest request)
        {   //--Excepcion
            IEnumerable<Models.ReservaCancha> listaReservas = Models.ReservaCancha.SeleccionarTodo();
            return Json(listaReservas.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        public ActionResult EditarReservaCancha(Web.Models.ReservaCancha reserva)
        {
            reserva = Models.ReservaCancha.BuscarId(reserva.id);
            return View("ReservarCancha", reserva);
        
        }

        public ActionResult CancelarReservaCancha(short id)
        {
                  
            Models.ReservaCancha.Eliminar(id);
            return View("ReservarCancha");
        
        }

        public JsonResult GetCascadeNumeros(String tipoCancha, DataSourceRequest request)
        {
            IEnumerable<Models.Cancha> canchas = null;
            if (tipoCancha != null) //Sólo he logrado que entre un valor constante. Ni el cascadeFrom ni el ToComponent().Value me dan nada.
            {
                canchas = Models.Cancha.buscarTipo(Int16.Parse(tipoCancha));
                return Json(canchas.ToDataSourceResult(request)); //Falla, probablemente porque el request no existe, es null, inventado.
            }
            else
            {
                return null;
            }
        }

        
        public ActionResult LeerSedes()
        {
            IEnumerable<Models.Sede> ListaSedes = Models.Sede.SeleccionarTodo();

            return Json(ListaSedes, JsonRequestBehavior.AllowGet);
        }


        public ActionResult LeerTipoCancha(string idSede)
        {
            short idsede = Convert.ToInt16(idSede);
            IEnumerable<Models.TipoCancha> ListaSedes = Models.TipoCancha.BuscarPorSede(idsede);
            return Json(ListaSedes, JsonRequestBehavior.AllowGet);
        }

        public ActionResult LeerNumeroCancha(string idTipo)
        {
            short idtipo = Convert.ToInt16(idTipo);
            IEnumerable<Models.Cancha> ListaSedes = Models.Cancha.buscarTipo(idtipo);
            return Json(ListaSedes, JsonRequestBehavior.AllowGet);
        }

        
        //********************************RESERVAR BUNGALOW *******************************************************************************************

        public ActionResult ObtenerUrlImagen(String id)
        {
            return Json("../Content/img/" + id.Trim(new Char[] { '\\', '\"' }) + ".jpg", JsonRequestBehavior.AllowGet);
        }

        public JsonResult ObtenerSedes()
        {
            var sedes = Web.Models.Sede.SeleccionarTodo();
            return Json(sedes, JsonRequestBehavior.AllowGet);
        }


        public ActionResult ConsultarDisponibilidadBungalow()
        {
            return PartialView();
        }


        public ActionResult ReservarBungalow()
        {
            return View();
        }
    }
}


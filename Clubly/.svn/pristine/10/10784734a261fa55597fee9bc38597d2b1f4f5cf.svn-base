using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Datos;

namespace Negocio
{
    public class Evento
    {
        //context Singleton
        public static Entities context()
        {
            return Datos.Context.context();
        }

        //insertar
        public static void insertar(Datos.Evento evento)
        {
            //Este metodo hace inserts para cualquier tipo de Evento
            context().AddToEvento(evento);
            if (evento.EventoCorporativo != null)
                context().AddToEventoCorporativo(evento.EventoCorporativo);
            else
                if (evento.EventoPrivado != null)
                    context().AddToEventoPrivado(evento.EventoPrivado);
                else
                    if (evento.EventoPublico != null)
                        context().AddToEventoPublico(evento.EventoPublico);
            context().SaveChanges();
        }
        //modificar
        public static void modificar(Datos.Evento evento)
        {
            context().Evento.Attach(context().Evento.Single(p => p.id == evento.id));
            context().Evento.ApplyCurrentValues(evento);
            context().SaveChanges();
        }
        //eliminar
        public static void eliminar(Datos.Evento evento)//falta probar, podria no funcionar correctamente
        {
            context().Evento.SingleOrDefault(e => e.id == evento.id).estado = 0;
            evento.estado = 0;
            context().Evento.ApplyCurrentValues(evento);
            context().SaveChanges();
        }

        //seleccionar
        public static IEnumerable<Datos.Evento> seleccionarTodo()
        {
            IEnumerable<Datos.Evento> listaEventos=context().Evento.ToArray().Where(evento => evento.estado != 0);
            System.Diagnostics.Debug.WriteLine("Eventos seleccionados: " + listaEventos.ToList().Count);
            return listaEventos;
        }
        public static IEnumerable<Datos.Evento> seleccionarEventoCoporativo()
        {
            return context().Evento.ToArray().Where(evento => (evento.EventoCorporativo != null) && (evento.estado != 0));
        }
        public static IEnumerable<Datos.Evento> seleccionarEventoPublico()
        {
            return context().Evento.ToArray().Where(evento => (evento.EventoPublico != null) && (evento.estado != 0));
        }
        public static IEnumerable<Datos.Evento> seleccionarEventoPrivado()
        {
            return context().Evento.ToArray().Where(evento => (evento.EventoPrivado != null) && (evento.estado != 0));
        }
        public static IEnumerable<Datos.Evento> seleccionarEventosDisponibles()
        {            
            IEnumerable<Datos.Evento> listaEventos = context().Evento.ToArray()
                .Where(evento => (evento.estado != 0)&&(evento.fechaFin<=DateTime.Now));
            System.Diagnostics.Debug.WriteLine("Eventos seleccionados: " + listaEventos.ToList().Count);
            return listaEventos;
        }

        //buscar
        public static Datos.Evento buscarId(int id)
        {
            return context().Evento.FirstOrDefault(p => p.id == id);
        }
        public static IEnumerable<Datos.Evento> buscarNombre(String nombre)
        {
            return context().Evento.Where(p => p.nombre == nombre).ToList();
        }
        public static IEnumerable<Datos.Evento> buscarEstado(short estado)
        {
            return context().Evento.Where(p => p.estado == estado).ToList();
        }
    }
}           
